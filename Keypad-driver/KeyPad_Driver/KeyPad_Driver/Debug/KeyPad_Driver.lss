
KeyPad_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000464  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c7a  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c3  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000624  00000000  00000000  000019f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000682  00000000  00000000  00002546  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  64:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
 *					- else 	clear that pin
 */
void DIO_SetPinDirection(uint8 portno, uint8 pinno, uint8 state)
{
	/* Switch over portno if it 0->>>PORTA, if 1->>>PORTB, if 2->>>PORTC, if 3->>>PORTD */
	switch (portno)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	01 f1       	breq	.+64     	; 0xb0 <DIO_SetPinDirection+0x44>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_SetPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	b1 f1       	breq	.+108    	; 0xe2 <DIO_SetPinDirection+0x76>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_SetPinDirection+0x10>
  7a:	4c c0       	rjmp	.+152    	; 0x114 <DIO_SetPinDirection+0xa8>
  7c:	08 95       	ret
	{
		case PORTA:
			/* check state */
			if (state == OUTPUT)
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <DIO_SetPinDirection+0x2c>
			{
				SET_BIT(DDRA_REG, pinno);
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <DIO_SetPinDirection+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <DIO_SetPinDirection+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA_REG, pinno);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_SetPinDirection+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_SetPinDirection+0x34>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
			}
			break;
			
		case PORTB:
			/* check state */
			if (state == OUTPUT)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	59 f4       	brne	.+22     	; 0xca <DIO_SetPinDirection+0x5e>
			{
				SET_BIT(DDRB_REG, pinno);
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SetPinDirection+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SetPinDirection+0x50>
  c4:	82 2b       	or	r24, r18
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB_REG, pinno);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_SetPinDirection+0x6a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_SetPinDirection+0x66>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
			}
			break;
			
		case PORTC:
			/* check state */
			if (state == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	59 f4       	brne	.+22     	; 0xfc <DIO_SetPinDirection+0x90>
			{
				SET_BIT(DDRC_REG, pinno);
  e6:	24 b3       	in	r18, 0x14	; 20
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDirection+0x86>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDirection+0x82>
  f6:	82 2b       	or	r24, r18
  f8:	84 bb       	out	0x14, r24	; 20
  fa:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC_REG, pinno);
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SetPinDirection+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SetPinDirection+0x98>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
			}
			break;
			
		case PORTD:
			/* check state */
			if (state == OUTPUT)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <DIO_SetPinDirection+0xc2>
			{
				SET_BIT(DDRD_REG, pinno);
 118:	21 b3       	in	r18, 0x11	; 17
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDirection+0xb8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDirection+0xb4>
 128:	82 2b       	or	r24, r18
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD_REG, pinno);
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0xca>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret

00000146 <DIO_SetPortDirection>:
 *					- else put state
 */
void DIO_SetPortDirection(uint8 portno, uint8 state)
{
	/* check which port */
	switch (portno)
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	99 f0       	breq	.+38     	; 0x170 <DIO_SetPortDirection+0x2a>
 14a:	28 f0       	brcs	.+10     	; 0x156 <DIO_SetPortDirection+0x10>
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	e9 f0       	breq	.+58     	; 0x18a <DIO_SetPortDirection+0x44>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	41 f1       	breq	.+80     	; 0x1a4 <DIO_SetPortDirection+0x5e>
 154:	08 95       	ret
	{
		case PORTA:
			/* check direction state for port */
			if (state == OUTPUT)
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	19 f4       	brne	.+6      	; 0x160 <DIO_SetPortDirection+0x1a>
			{
				DDRA_REG = 0XFF;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	8a bb       	out	0x1a, r24	; 26
 15e:	08 95       	ret
			}
			else if (state == INPUT)
 160:	61 11       	cpse	r22, r1
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPortDirection+0x22>
			{
				DDRA_REG = 0X00;
 164:	1a ba       	out	0x1a, r1	; 26
 166:	08 95       	ret
			}
			else
			{
				DDRA_REG |= state;		
 168:	8a b3       	in	r24, 0x1a	; 26
 16a:	68 2b       	or	r22, r24
 16c:	6a bb       	out	0x1a, r22	; 26
 16e:	08 95       	ret
			}
			break;
			
		case PORTB:
			/* check direction state for port */
			if (state == OUTPUT)
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	19 f4       	brne	.+6      	; 0x17a <DIO_SetPortDirection+0x34>
			{
				DDRB_REG = 0XFF;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	87 bb       	out	0x17, r24	; 23
 178:	08 95       	ret
			}
			else if (state == INPUT)
 17a:	61 11       	cpse	r22, r1
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPortDirection+0x3c>
			{
				DDRB_REG = 0X00;
 17e:	17 ba       	out	0x17, r1	; 23
 180:	08 95       	ret
			}
			else
			{
				DDRB_REG |= state;
 182:	87 b3       	in	r24, 0x17	; 23
 184:	68 2b       	or	r22, r24
 186:	67 bb       	out	0x17, r22	; 23
 188:	08 95       	ret
			}
			break;
			
		case PORTC:
			/* check direction state for port */
			if (state == OUTPUT)
 18a:	61 30       	cpi	r22, 0x01	; 1
 18c:	19 f4       	brne	.+6      	; 0x194 <DIO_SetPortDirection+0x4e>
			{
				DDRC_REG = 0XFF;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	84 bb       	out	0x14, r24	; 20
 192:	08 95       	ret
			}
			else if (state == INPUT)
 194:	61 11       	cpse	r22, r1
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SetPortDirection+0x56>
			{
				DDRC_REG = 0X00;
 198:	14 ba       	out	0x14, r1	; 20
 19a:	08 95       	ret
			}
			else
			{
				DDRC_REG |= state;
 19c:	84 b3       	in	r24, 0x14	; 20
 19e:	68 2b       	or	r22, r24
 1a0:	64 bb       	out	0x14, r22	; 20
 1a2:	08 95       	ret
			}
			break;
			
		case PORTD:
			/* check direction state for port */
			if (state == OUTPUT)
 1a4:	61 30       	cpi	r22, 0x01	; 1
 1a6:	19 f4       	brne	.+6      	; 0x1ae <DIO_SetPortDirection+0x68>
			{
				DDRD_REG = 0XFF;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	81 bb       	out	0x11, r24	; 17
 1ac:	08 95       	ret
			}
			else if (state == INPUT)
 1ae:	61 11       	cpse	r22, r1
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPortDirection+0x70>
			{
				DDRD_REG = 0X00;
 1b2:	11 ba       	out	0x11, r1	; 17
 1b4:	08 95       	ret
			}
			else
			{
				DDRC_REG |= state;
 1b6:	84 b3       	in	r24, 0x14	; 20
 1b8:	68 2b       	or	r22, r24
 1ba:	64 bb       	out	0x14, r22	; 20
 1bc:	08 95       	ret

000001be <DIO_SetPinValue>:
 *					- else 	clear that pin
 */
void DIO_SetPinValue(uint8 portno, uint8 pinno, uint8 value)
{
	/* check which port */
	switch (portno)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	01 f1       	breq	.+64     	; 0x202 <DIO_SetPinValue+0x44>
 1c2:	30 f0       	brcs	.+12     	; 0x1d0 <DIO_SetPinValue+0x12>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	b1 f1       	breq	.+108    	; 0x234 <DIO_SetPinValue+0x76>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	09 f4       	brne	.+2      	; 0x1ce <DIO_SetPinValue+0x10>
 1cc:	4c c0       	rjmp	.+152    	; 0x266 <DIO_SetPinValue+0xa8>
 1ce:	08 95       	ret
	{
		case PORTA:
			/* check if value is high */
			if (value == HIGH)
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	59 f4       	brne	.+22     	; 0x1ea <DIO_SetPinValue+0x2c>
			{
				SET_BIT(PORTA_REG, pinno);	
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SetPinValue+0x22>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SetPinValue+0x1e>
 1e4:	82 2b       	or	r24, r18
 1e6:	8b bb       	out	0x1b, r24	; 27
 1e8:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA_REG, pinno);
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPinValue+0x38>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPinValue+0x34>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	08 95       	ret
			}
			break;
		
		case PORTB:
			/* check if value is high */
			if (value == HIGH)
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	59 f4       	brne	.+22     	; 0x21c <DIO_SetPinValue+0x5e>
			{
				SET_BIT(PORTB_REG, pinno);
 206:	28 b3       	in	r18, 0x18	; 24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_SetPinValue+0x54>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_SetPinValue+0x50>
 216:	82 2b       	or	r24, r18
 218:	88 bb       	out	0x18, r24	; 24
 21a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB_REG, pinno);
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_SetPinValue+0x6a>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_SetPinValue+0x66>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	88 bb       	out	0x18, r24	; 24
 232:	08 95       	ret
			}
			break;
		
		case PORTC:
			/* check if value is high */
			if (value == HIGH)
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	59 f4       	brne	.+22     	; 0x24e <DIO_SetPinValue+0x90>
			{
				SET_BIT(PORTC_REG, pinno);
 238:	25 b3       	in	r18, 0x15	; 21
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_SetPinValue+0x86>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_SetPinValue+0x82>
 248:	82 2b       	or	r24, r18
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC_REG, pinno);
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPinValue+0x9c>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPinValue+0x98>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	85 bb       	out	0x15, r24	; 21
 264:	08 95       	ret
			}
			break;
			
		case PORTD:
			/* check if value is high */
			if (value == HIGH)
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	59 f4       	brne	.+22     	; 0x280 <DIO_SetPinValue+0xc2>
			{
				SET_BIT(PORTD_REG, pinno);
 26a:	22 b3       	in	r18, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPinValue+0xb8>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPinValue+0xb4>
 27a:	82 2b       	or	r24, r18
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD_REG, pinno);
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinValue+0xce>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinValue+0xca>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	82 bb       	out	0x12, r24	; 18
 296:	08 95       	ret

00000298 <DIO_SetPortValue>:
 *					- set port to its value
 */
void DIO_SetPortValue(uint8 portno, uint8 value)
{
	/* check which port */
	switch (portno)
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	41 f0       	breq	.+16     	; 0x2ac <DIO_SetPortValue+0x14>
 29c:	28 f0       	brcs	.+10     	; 0x2a8 <DIO_SetPortValue+0x10>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	39 f0       	breq	.+14     	; 0x2b0 <DIO_SetPortValue+0x18>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	39 f0       	breq	.+14     	; 0x2b4 <DIO_SetPortValue+0x1c>
 2a6:	08 95       	ret
	{
		case PORTA:	PORTA_REG = value;	break;
 2a8:	6b bb       	out	0x1b, r22	; 27
 2aa:	08 95       	ret
		case PORTB:	PORTB_REG = value;	break;
 2ac:	68 bb       	out	0x18, r22	; 24
 2ae:	08 95       	ret
		case PORTC:	PORTC_REG = value;	break;
 2b0:	65 bb       	out	0x15, r22	; 21
 2b2:	08 95       	ret
		case PORTD:	PORTD_REG = value;	break;
 2b4:	62 bb       	out	0x12, r22	; 18
 2b6:	08 95       	ret

000002b8 <DIO_RdPinValue>:
 */
uint8 DIO_RdPinValue(uint8 portno, uint8 pinno)
{
	uint8 ret = 0;
	
	switch (portno)
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	81 f0       	breq	.+32     	; 0x2dc <DIO_RdPinValue+0x24>
 2bc:	28 f0       	brcs	.+10     	; 0x2c8 <DIO_RdPinValue+0x10>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	b9 f0       	breq	.+46     	; 0x2f0 <DIO_RdPinValue+0x38>
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	f9 f0       	breq	.+62     	; 0x304 <DIO_RdPinValue+0x4c>
 2c6:	28 c0       	rjmp	.+80     	; 0x318 <DIO_RdPinValue+0x60>
	{
		case PORTA: ret = RD_BIT(PINA_REG, pinno);	break;
 2c8:	29 b3       	in	r18, 0x19	; 25
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_RdPinValue+0x1c>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_RdPinValue+0x18>
 2d8:	82 23       	and	r24, r18
 2da:	08 95       	ret
		case PORTB: ret = RD_BIT(PINB_REG, pinno);	break;
 2dc:	26 b3       	in	r18, 0x16	; 22
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_RdPinValue+0x30>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_RdPinValue+0x2c>
 2ec:	82 23       	and	r24, r18
 2ee:	08 95       	ret
		case PORTC: ret = RD_BIT(PINC_REG, pinno);	break;
 2f0:	23 b3       	in	r18, 0x13	; 19
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_RdPinValue+0x44>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_RdPinValue+0x40>
 300:	82 23       	and	r24, r18
 302:	08 95       	ret
		case PORTD: ret = RD_BIT(PIND_REG, pinno);	break;	
 304:	20 b3       	in	r18, 0x10	; 16
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_RdPinValue+0x58>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_RdPinValue+0x54>
 314:	82 23       	and	r24, r18
 316:	08 95       	ret
 *					- switch over ports 
 *					- read the value of a pin and return it
 */
uint8 DIO_RdPinValue(uint8 portno, uint8 pinno)
{
	uint8 ret = 0;
 318:	80 e0       	ldi	r24, 0x00	; 0
		case PORTB: ret = RD_BIT(PINB_REG, pinno);	break;
		case PORTC: ret = RD_BIT(PINC_REG, pinno);	break;
		case PORTD: ret = RD_BIT(PIND_REG, pinno);	break;	
	}
	return ret;
}
 31a:	08 95       	ret

0000031c <KeyPad_Init>:

/* initialize keypad */
void KeyPad_Init(void)
{
	/* Set rows direction to be output */
	DIO_SetPinDirection(keypad_port, ROW0, OUTPUT);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port, ROW1, OUTPUT);
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port, ROW2, OUTPUT);
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port, ROW3, OUTPUT);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	
	/* Set cols direction to be inputs */
	#if (COLS == 3)
		DIO_SetPinDirection(keypad_port, COL0, INPUT);
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
		DIO_SetPinDirection(keypad_port, COL1, INPUT);
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	65 e0       	ldi	r22, 0x05	; 5
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
		DIO_SetPinDirection(keypad_port, COL2, INPUT);
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	66 e0       	ldi	r22, 0x06	; 6
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
		/* connect pull up resistance to the input pins */
		DIO_SetPinValue(keypad_port, COL0, HIGH);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	64 e0       	ldi	r22, 0x04	; 4
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
		DIO_SetPinValue(keypad_port, COL1, HIGH);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	65 e0       	ldi	r22, 0x05	; 5
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
		DIO_SetPinValue(keypad_port, COL2, HIGH);
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	66 e0       	ldi	r22, 0x06	; 6
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
 380:	08 95       	ret

00000382 <KeyPad_pressed>:
	#endif
}

/* check which key is pressed and return THE NUMBER for it */
uint8 KeyPad_pressed(void)
{
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
	uint8 row_count, col_count;
	while(1)
	{
		/* looping on rows */
		for (row_count = 0; row_count < ROWS; row_count++)
 388:	10 e0       	ldi	r17, 0x00	; 0
		{
			DIO_SetPinValue(keypad_port, ROW0, HIGH);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
			DIO_SetPinValue(keypad_port, ROW1, HIGH);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
			DIO_SetPinValue(keypad_port, ROW2, HIGH);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
			DIO_SetPinValue(keypad_port, ROW3, HIGH);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	8f e3       	ldi	r24, 0x3F	; 63
 3b4:	9c e9       	ldi	r25, 0x9C	; 156
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <KeyPad_pressed+0x34>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <KeyPad_pressed+0x3a>
 3bc:	00 00       	nop
			_delay_ms(20);
			/* write 0 to the corresponding row in keypad*/
			DIO_SetPinValue(keypad_port, ROW0 + row_count, LOW);
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	61 2f       	mov	r22, r17
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
		
			/* looping on cols */
			for (col_count = 0; col_count < COLS; col_count++)
 3c8:	c0 e0       	ldi	r28, 0x00	; 0
			{
				/* check if number [row][col] is pressed */	
				if (DIO_RdPinValue(keypad_port, col_count + COL0) == 0)
 3ca:	d4 e0       	ldi	r29, 0x04	; 4
 3cc:	dc 0f       	add	r29, r28
 3ce:	6d 2f       	mov	r22, r29
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_RdPinValue>
 3d6:	81 11       	cpse	r24, r1
 3d8:	1e c0       	rjmp	.+60     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3da:	8f e1       	ldi	r24, 0x1F	; 31
 3dc:	9e e4       	ldi	r25, 0x4E	; 78
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <KeyPad_pressed+0x5c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <KeyPad_pressed+0x62>
 3e4:	00 00       	nop
				{
					_delay_ms(10);
					if (DIO_RdPinValue(keypad_port, col_count + COL0) == 0)
 3e6:	6d 2f       	mov	r22, r29
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_RdPinValue>
 3ee:	81 11       	cpse	r24, r1
 3f0:	12 c0       	rjmp	.+36     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
					{
						/* Get the value of the currently pressed switch */
						#if (COLS == 3)
						return KeyPad4x3((row_count*COLS)+col_count+1);
 3f2:	cf 5f       	subi	r28, 0xFF	; 255
 3f4:	91 2f       	mov	r25, r17
 3f6:	99 0f       	add	r25, r25
 3f8:	19 0f       	add	r17, r25
 3fa:	c1 0f       	add	r28, r17
}

#if (COLS == 3)
static uint8 KeyPad4x3(uint8 pressed_number)
{
	switch(pressed_number)
 3fc:	cb 30       	cpi	r28, 0x0B	; 11
 3fe:	99 f0       	breq	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 400:	cc 30       	cpi	r28, 0x0C	; 12
 402:	19 f0       	breq	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	ca 30       	cpi	r28, 0x0A	; 10
 406:	19 f4       	brne	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		case 10: return '*';
		break;
		case 11: return 0;
		break;
		case 12: return '#'; 
 40a:	83 e2       	ldi	r24, 0x23	; 35
 40c:	0c c0       	rjmp	.+24     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		break;
		default: return pressed_number;
 40e:	8c 2f       	mov	r24, r28
 410:	0a c0       	rjmp	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
#if (COLS == 3)
static uint8 KeyPad4x3(uint8 pressed_number)
{
	switch(pressed_number)
	{
		case 10: return '*';
 412:	8a e2       	ldi	r24, 0x2A	; 42
					_delay_ms(10);
					if (DIO_RdPinValue(keypad_port, col_count + COL0) == 0)
					{
						/* Get the value of the currently pressed switch */
						#if (COLS == 3)
						return KeyPad4x3((row_count*COLS)+col_count+1);
 414:	08 c0       	rjmp	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			_delay_ms(20);
			/* write 0 to the corresponding row in keypad*/
			DIO_SetPinValue(keypad_port, ROW0 + row_count, LOW);
		
			/* looping on cols */
			for (col_count = 0; col_count < COLS; col_count++)
 416:	cf 5f       	subi	r28, 0xFF	; 255
 418:	c3 30       	cpi	r28, 0x03	; 3
 41a:	b9 f6       	brne	.-82     	; 0x3ca <KeyPad_pressed+0x48>
{
	uint8 row_count, col_count;
	while(1)
	{
		/* looping on rows */
		for (row_count = 0; row_count < ROWS; row_count++)
 41c:	1f 5f       	subi	r17, 0xFF	; 255
 41e:	14 30       	cpi	r17, 0x04	; 4
 420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	b3 cf       	rjmp	.-154    	; 0x38a <KeyPad_pressed+0x8>
 424:	b1 cf       	rjmp	.-158    	; 0x388 <KeyPad_pressed+0x6>
					}
				}
			}
		}
	}
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	08 95       	ret

0000042e <main>:
#include "DIO_INT.h"
#include "delay.h"

int main(void)
{
	KeyPad_Init();
 42e:	0e 94 8e 01 	call	0x31c	; 0x31c <KeyPad_Init>
	uint8 key;
	DIO_SetPortDirection(PORTC, OUTPUT); /* 7-segment pins as output pins */
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_SetPortDirection>
	DIO_SetPortValue(PORTC,0xf0); /* 7-segment displays Zero at the beginning */
 43a:	60 ef       	ldi	r22, 0xF0	; 240
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 4c 01 	call	0x298	; 0x298 <DIO_SetPortValue>
	while(1)
	{
		key = KeyPad_pressed(); /* get the pressed button from keypad */
 442:	0e 94 c1 01 	call	0x382	; 0x382 <KeyPad_pressed>
 446:	ef e1       	ldi	r30, 0x1F	; 31
 448:	fe e4       	ldi	r31, 0x4E	; 78
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <main+0x1c>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <main+0x22>
 450:	00 00       	nop
		_delay_ms(10);
		if((key >= 0) && (key <= 9))
 452:	8a 30       	cpi	r24, 0x0A	; 10
 454:	b0 f7       	brcc	.-20     	; 0x442 <main+0x14>
		{
			DIO_SetPortValue(PORTC, key);
 456:	68 2f       	mov	r22, r24
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 4c 01 	call	0x298	; 0x298 <DIO_SetPortValue>
 45e:	f1 cf       	rjmp	.-30     	; 0x442 <main+0x14>

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
