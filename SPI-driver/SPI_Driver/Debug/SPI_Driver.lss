
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c2  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000774  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000621  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ab  00000000  00000000  00001f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000025ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_Init>:
/*
* Description: Function to initialize DIO
*/
void DIO_Init(void)
{
	DDRA_REG = DDRA_INIT;
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB_REG = DDRB_INIT;
  6e:	17 ba       	out	0x17, r1	; 23
	DDRC_REG = DDRC_INIT;
  70:	14 ba       	out	0x14, r1	; 20
	DDRD_REG = DDRD_INIT;
  72:	11 ba       	out	0x11, r1	; 17
	
	PORTA_REG = PORTA_INIT;
  74:	1b ba       	out	0x1b, r1	; 27
	PORTB_REG = PORTB_INIT;
  76:	18 ba       	out	0x18, r1	; 24
	PORTC_REG = PORTC_INIT;
  78:	15 ba       	out	0x15, r1	; 21
	PORTD_REG = PORTD_INIT;
  7a:	12 ba       	out	0x12, r1	; 18
  7c:	08 95       	ret

0000007e <main>:


int main(void)
{
	uint8 i = 0;
	DIO_Init();
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_Init>
	SPI_Mater_Init();
  82:	0e 94 56 00 	call	0xac	; 0xac <SPI_Mater_Init>
#include <util/delay.h>


int main(void)
{
	uint8 i = 0;
  86:	c0 e0       	ldi	r28, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <main+0xe>
		{
			i++;
		}
		else
		{
			i = 0;
  8a:	c0 e0       	ldi	r28, 0x00	; 0
	SPI_Mater_Init();
	//DIO_SetPinValue(PORTB, PIN4, LOW);
	
    while (1) 
    {
		SPI_SendByte(i);
  8c:	8c 2f       	mov	r24, r28
  8e:	0e 94 5d 00 	call	0xba	; 0xba <SPI_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	80 e7       	ldi	r24, 0x70	; 112
  96:	92 e0       	ldi	r25, 0x02	; 2
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x24>
  a2:	00 00       	nop
		_delay_ms(100);
		if (i != 9)
  a4:	c9 30       	cpi	r28, 0x09	; 9
  a6:	89 f3       	breq	.-30     	; 0x8a <main+0xc>
		{
			i++;
  a8:	cf 5f       	subi	r28, 0xFF	; 255
  aa:	f0 cf       	rjmp	.-32     	; 0x8c <main+0xe>

000000ac <SPI_Mater_Init>:
	DDRB_REG &= ~(1 << PIN4);
	DDRB_REG &= ~(1 << PIN5);
	DDRB_REG |= (1 << PIN6);
	DDRB_REG &= ~(1 << PIN7);
	
	SPCR = (1<<SPE);
  ac:	bc 9a       	sbi	0x17, 4	; 23
  ae:	bd 9a       	sbi	0x17, 5	; 23
  b0:	be 98       	cbi	0x17, 6	; 23
  b2:	bf 9a       	sbi	0x17, 7	; 23
  b4:	80 e5       	ldi	r24, 0x50	; 80
  b6:	8d b9       	out	0x0d, r24	; 13
  b8:	08 95       	ret

000000ba <SPI_SendByte>:
}


void SPI_SendByte(uint8 byte)
{
	SPDR = byte;
  ba:	8f b9       	out	0x0f, r24	; 15
	while(!RD_BIT(SPSR, SPIF));
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <SPI_SendByte+0x2>
}
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
