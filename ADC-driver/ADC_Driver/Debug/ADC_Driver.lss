
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000610  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000610  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001427  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000932  00000000  00000000  00001c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f6  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e2d  00000000  00000000  0000349b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
  7a:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
//ADC Initialization And Enable
void ADC_Init(void)
{
	#if(DEFAULT == 1)
		//enable ADC
		SET_BIT(ADCCSRA, ADEN);
  82:	37 9a       	sbi	0x06, 7	; 6
	
		//reference Voltage as AVCC with external capacitor
		CLR_BIT(ADMUX,REFS1);
  84:	3f 98       	cbi	0x07, 7	; 7
		SET_BIT(ADMUX,REFS0);
  86:	3e 9a       	sbi	0x07, 6	; 7
	
		//right adjust
		CLR_BIT(ADMUX, ADLAR);
  88:	3d 98       	cbi	0x07, 5	; 7
	
		//Prescaler Configuration as 128
		SET_BIT(ADCCSRA, ADPS0);
  8a:	30 9a       	sbi	0x06, 0	; 6
		SET_BIT(ADCCSRA, ADPS1);
  8c:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCCSRA, ADPS2);
  8e:	32 9a       	sbi	0x06, 2	; 6
  90:	08 95       	ret

00000092 <ADC_Read>:
//Read From The ADC Channel
uint16 ADC_Read(uint8 channel)
{
	uint16 ret = 0;
	//ADC Channel Selection
	ADMUX = (ADMUX & 0xE0) | channel;
  92:	97 b1       	in	r25, 0x07	; 7
  94:	90 7e       	andi	r25, 0xE0	; 224
  96:	89 2b       	or	r24, r25
  98:	87 b9       	out	0x07, r24	; 7
	
	//Start conversion
	SET_BIT(ADCCSRA, ADSC);
  9a:	36 9a       	sbi	0x06, 6	; 6
	
	//wait until the end of conversion
	while(RD_BIT(ADCCSRA, ADIF) !=0);
  9c:	34 99       	sbic	0x06, 4	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <ADC_Read+0xa>
	
	//ADC Flag Clear
	SET_BIT(ADCCSRA, ADIF);
  a0:	34 9a       	sbi	0x06, 4	; 6
	
	ret = ADCL;
  a2:	84 b1       	in	r24, 0x04	; 4
	ret |= ((uint16) (ADCH << 8)); 
  a4:	25 b1       	in	r18, 0x05	; 5
	
	return ret;
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	92 2b       	or	r25, r18
  aa:	08 95       	ret

000000ac <DIO_SetPinDirection>:
 *					- else 	clear that pin
 */
void DIO_SetPinDirection(uint8 portno, uint8 pinno, uint8 state)
{
	/* Switch over portno if it 0->>>PORTA, if 1->>>PORTB, if 2->>>PORTC, if 3->>>PORTD */
	switch (portno)
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	01 f1       	breq	.+64     	; 0xf0 <DIO_SetPinDirection+0x44>
  b0:	30 f0       	brcs	.+12     	; 0xbe <DIO_SetPinDirection+0x12>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	b1 f1       	breq	.+108    	; 0x122 <DIO_SetPinDirection+0x76>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_SetPinDirection+0x10>
  ba:	4c c0       	rjmp	.+152    	; 0x154 <DIO_SetPinDirection+0xa8>
  bc:	08 95       	ret
	{
		case PORTA:
			/* check state */
			if (state == OUTPUT)
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	59 f4       	brne	.+22     	; 0xd8 <DIO_SetPinDirection+0x2c>
			{
				SET_BIT(DDRA_REG, pinno);
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDirection+0x22>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDirection+0x1e>
  d2:	82 2b       	or	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA_REG, pinno);
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDirection+0x38>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDirection+0x34>
  e8:	80 95       	com	r24
  ea:	82 23       	and	r24, r18
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	08 95       	ret
			}
			break;
			
		case PORTB:
			/* check state */
			if (state == OUTPUT)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	59 f4       	brne	.+22     	; 0x10a <DIO_SetPinDirection+0x5e>
			{
				SET_BIT(DDRB_REG, pinno);
  f4:	27 b3       	in	r18, 0x17	; 23
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPinDirection+0x54>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPinDirection+0x50>
 104:	82 2b       	or	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB_REG, pinno);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPinDirection+0x6a>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPinDirection+0x66>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
 120:	08 95       	ret
			}
			break;
			
		case PORTC:
			/* check state */
			if (state == OUTPUT)
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	59 f4       	brne	.+22     	; 0x13c <DIO_SetPinDirection+0x90>
			{
				SET_BIT(DDRC_REG, pinno);
 126:	24 b3       	in	r18, 0x14	; 20
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SetPinDirection+0x86>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SetPinDirection+0x82>
 136:	82 2b       	or	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC_REG, pinno);
 13c:	24 b3       	in	r18, 0x14	; 20
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_SetPinDirection+0x9c>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_SetPinDirection+0x98>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	84 bb       	out	0x14, r24	; 20
 152:	08 95       	ret
			}
			break;
			
		case PORTD:
			/* check state */
			if (state == OUTPUT)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	59 f4       	brne	.+22     	; 0x16e <DIO_SetPinDirection+0xc2>
			{
				SET_BIT(DDRD_REG, pinno);
 158:	21 b3       	in	r18, 0x11	; 17
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_SetPinDirection+0xb8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_SetPinDirection+0xb4>
 168:	82 2b       	or	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD_REG, pinno);
 16e:	21 b3       	in	r18, 0x11	; 17
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_SetPinDirection+0xce>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_SetPinDirection+0xca>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	81 bb       	out	0x11, r24	; 17
 184:	08 95       	ret

00000186 <DIO_SetPortDirection>:
 *					- else put state
 */
void DIO_SetPortDirection(uint8 portno, uint8 state)
{
	/* check which port */
	switch (portno)
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	99 f0       	breq	.+38     	; 0x1b0 <DIO_SetPortDirection+0x2a>
 18a:	28 f0       	brcs	.+10     	; 0x196 <DIO_SetPortDirection+0x10>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	e9 f0       	breq	.+58     	; 0x1ca <DIO_SetPortDirection+0x44>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	41 f1       	breq	.+80     	; 0x1e4 <DIO_SetPortDirection+0x5e>
 194:	08 95       	ret
	{
		case PORTA:
			/* check direction state for port */
			if (state == OUTPUT)
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	19 f4       	brne	.+6      	; 0x1a0 <DIO_SetPortDirection+0x1a>
			{
				DDRA_REG = 0XFF;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	8a bb       	out	0x1a, r24	; 26
 19e:	08 95       	ret
			}
			else if (state == INPUT)
 1a0:	61 11       	cpse	r22, r1
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPortDirection+0x22>
			{
				DDRA_REG = 0X00;
 1a4:	1a ba       	out	0x1a, r1	; 26
 1a6:	08 95       	ret
			}
			else
			{
				DDRA_REG |= state;		
 1a8:	8a b3       	in	r24, 0x1a	; 26
 1aa:	68 2b       	or	r22, r24
 1ac:	6a bb       	out	0x1a, r22	; 26
 1ae:	08 95       	ret
			}
			break;
			
		case PORTB:
			/* check direction state for port */
			if (state == OUTPUT)
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	19 f4       	brne	.+6      	; 0x1ba <DIO_SetPortDirection+0x34>
			{
				DDRB_REG = 0XFF;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	87 bb       	out	0x17, r24	; 23
 1b8:	08 95       	ret
			}
			else if (state == INPUT)
 1ba:	61 11       	cpse	r22, r1
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPortDirection+0x3c>
			{
				DDRB_REG = 0X00;
 1be:	17 ba       	out	0x17, r1	; 23
 1c0:	08 95       	ret
			}
			else
			{
				DDRB_REG |= state;
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	68 2b       	or	r22, r24
 1c6:	67 bb       	out	0x17, r22	; 23
 1c8:	08 95       	ret
			}
			break;
			
		case PORTC:
			/* check direction state for port */
			if (state == OUTPUT)
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <DIO_SetPortDirection+0x4e>
			{
				DDRC_REG = 0XFF;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	84 bb       	out	0x14, r24	; 20
 1d2:	08 95       	ret
			}
			else if (state == INPUT)
 1d4:	61 11       	cpse	r22, r1
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPortDirection+0x56>
			{
				DDRC_REG = 0X00;
 1d8:	14 ba       	out	0x14, r1	; 20
 1da:	08 95       	ret
			}
			else
			{
				DDRC_REG |= state;
 1dc:	84 b3       	in	r24, 0x14	; 20
 1de:	68 2b       	or	r22, r24
 1e0:	64 bb       	out	0x14, r22	; 20
 1e2:	08 95       	ret
			}
			break;
			
		case PORTD:
			/* check direction state for port */
			if (state == OUTPUT)
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	19 f4       	brne	.+6      	; 0x1ee <DIO_SetPortDirection+0x68>
			{
				DDRD_REG = 0XFF;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	81 bb       	out	0x11, r24	; 17
 1ec:	08 95       	ret
			}
			else if (state == INPUT)
 1ee:	61 11       	cpse	r22, r1
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPortDirection+0x70>
			{
				DDRD_REG = 0X00;
 1f2:	11 ba       	out	0x11, r1	; 17
 1f4:	08 95       	ret
			}
			else
			{
				DDRC_REG |= state;
 1f6:	84 b3       	in	r24, 0x14	; 20
 1f8:	68 2b       	or	r22, r24
 1fa:	64 bb       	out	0x14, r22	; 20
 1fc:	08 95       	ret

000001fe <DIO_SetPinValue>:
 *					- else 	clear that pin
 */
void DIO_SetPinValue(uint8 portno, uint8 pinno, uint8 value)
{
	/* check which port */
	switch (portno)
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	01 f1       	breq	.+64     	; 0x242 <DIO_SetPinValue+0x44>
 202:	30 f0       	brcs	.+12     	; 0x210 <DIO_SetPinValue+0x12>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	b1 f1       	breq	.+108    	; 0x274 <DIO_SetPinValue+0x76>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	09 f4       	brne	.+2      	; 0x20e <DIO_SetPinValue+0x10>
 20c:	4c c0       	rjmp	.+152    	; 0x2a6 <DIO_SetPinValue+0xa8>
 20e:	08 95       	ret
	{
		case PORTA:
			/* check if value is high */
			if (value == HIGH)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	59 f4       	brne	.+22     	; 0x22a <DIO_SetPinValue+0x2c>
			{
				SET_BIT(PORTA_REG, pinno);	
 214:	2b b3       	in	r18, 0x1b	; 27
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPinValue+0x22>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPinValue+0x1e>
 224:	82 2b       	or	r24, r18
 226:	8b bb       	out	0x1b, r24	; 27
 228:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA_REG, pinno);
 22a:	2b b3       	in	r18, 0x1b	; 27
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPinValue+0x38>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPinValue+0x34>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	8b bb       	out	0x1b, r24	; 27
 240:	08 95       	ret
			}
			break;
		
		case PORTB:
			/* check if value is high */
			if (value == HIGH)
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	59 f4       	brne	.+22     	; 0x25c <DIO_SetPinValue+0x5e>
			{
				SET_BIT(PORTB_REG, pinno);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_SetPinValue+0x54>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_SetPinValue+0x50>
 256:	82 2b       	or	r24, r18
 258:	88 bb       	out	0x18, r24	; 24
 25a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB_REG, pinno);
 25c:	28 b3       	in	r18, 0x18	; 24
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_SetPinValue+0x6a>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_SetPinValue+0x66>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	88 bb       	out	0x18, r24	; 24
 272:	08 95       	ret
			}
			break;
		
		case PORTC:
			/* check if value is high */
			if (value == HIGH)
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	59 f4       	brne	.+22     	; 0x28e <DIO_SetPinValue+0x90>
			{
				SET_BIT(PORTC_REG, pinno);
 278:	25 b3       	in	r18, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_SetPinValue+0x86>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_SetPinValue+0x82>
 288:	82 2b       	or	r24, r18
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC_REG, pinno);
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_SetPinValue+0x9c>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_SetPinValue+0x98>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	85 bb       	out	0x15, r24	; 21
 2a4:	08 95       	ret
			}
			break;
			
		case PORTD:
			/* check if value is high */
			if (value == HIGH)
 2a6:	41 30       	cpi	r20, 0x01	; 1
 2a8:	59 f4       	brne	.+22     	; 0x2c0 <DIO_SetPinValue+0xc2>
			{
				SET_BIT(PORTD_REG, pinno);
 2aa:	22 b3       	in	r18, 0x12	; 18
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_SetPinValue+0xb8>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_SetPinValue+0xb4>
 2ba:	82 2b       	or	r24, r18
 2bc:	82 bb       	out	0x12, r24	; 18
 2be:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD_REG, pinno);
 2c0:	22 b3       	in	r18, 0x12	; 18
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_SetPinValue+0xce>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_SetPinValue+0xca>
 2d0:	80 95       	com	r24
 2d2:	82 23       	and	r24, r18
 2d4:	82 bb       	out	0x12, r24	; 18
 2d6:	08 95       	ret

000002d8 <DIO_SetPortValue>:
 *					- set port to its value
 */
void DIO_SetPortValue(uint8 portno, uint8 value)
{
	/* check which port */
	switch (portno)
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <DIO_SetPortValue+0x14>
 2dc:	28 f0       	brcs	.+10     	; 0x2e8 <DIO_SetPortValue+0x10>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	39 f0       	breq	.+14     	; 0x2f0 <DIO_SetPortValue+0x18>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <DIO_SetPortValue+0x1c>
 2e6:	08 95       	ret
	{
		case PORTA:	PORTA_REG = value;	break;
 2e8:	6b bb       	out	0x1b, r22	; 27
 2ea:	08 95       	ret
		case PORTB:	PORTB_REG = value;	break;
 2ec:	68 bb       	out	0x18, r22	; 24
 2ee:	08 95       	ret
		case PORTC:	PORTC_REG = value;	break;
 2f0:	65 bb       	out	0x15, r22	; 21
 2f2:	08 95       	ret
		case PORTD:	PORTD_REG = value;	break;
 2f4:	62 bb       	out	0x12, r22	; 18
 2f6:	08 95       	ret

000002f8 <LCD_SendCommand>:
	/* go to LCD position required position */
	LCD_Goto_xy(row,pos); 
	
	/* display the string */
	LCD_SendString(data); 
}
 2f8:	cf 93       	push	r28
 2fa:	c8 2f       	mov	r28, r24
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 31a:	6c 2f       	mov	r22, r28
 31c:	60 7f       	andi	r22, 0xF0	; 240
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_SetPortValue>
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 32e:	8f ec       	ldi	r24, 0xCF	; 207
 330:	97 e0       	ldi	r25, 0x07	; 7
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_SendCommand+0x3a>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_SendCommand+0x40>
 338:	00 00       	nop
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 344:	8f ec       	ldi	r24, 0xCF	; 207
 346:	97 e0       	ldi	r25, 0x07	; 7
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_SendCommand+0x50>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_SendCommand+0x56>
 34e:	00 00       	nop
 350:	6c 2f       	mov	r22, r28
 352:	62 95       	swap	r22
 354:	60 7f       	andi	r22, 0xF0	; 240
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_SetPortValue>
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 366:	8f ec       	ldi	r24, 0xCF	; 207
 368:	97 e0       	ldi	r25, 0x07	; 7
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_SendCommand+0x72>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_SendCommand+0x78>
 370:	00 00       	nop
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 37c:	8f ec       	ldi	r24, 0xCF	; 207
 37e:	97 e0       	ldi	r25, 0x07	; 7
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_SendCommand+0x88>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_SendCommand+0x8e>
 386:	00 00       	nop
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <LCD_Init>:
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 3aa:	60 ef       	ldi	r22, 0xF0	; 240
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPortDirection>
 3b2:	2f e7       	ldi	r18, 0x7F	; 127
 3b4:	88 e3       	ldi	r24, 0x38	; 56
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <LCD_Init+0x2c>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_Init+0x36>
 3c2:	00 00       	nop
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
 3ca:	8f ec       	ldi	r24, 0xCF	; 207
 3cc:	97 e0       	ldi	r25, 0x07	; 7
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_Init+0x42>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_Init+0x48>
 3d4:	00 00       	nop
 3d6:	88 e2       	ldi	r24, 0x28	; 40
 3d8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
 3dc:	8f ec       	ldi	r24, 0xCF	; 207
 3de:	97 e0       	ldi	r25, 0x07	; 7
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_Init+0x54>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_Init+0x5a>
 3e6:	00 00       	nop
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
 3ee:	8f ec       	ldi	r24, 0xCF	; 207
 3f0:	97 e0       	ldi	r25, 0x07	; 7
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_Init+0x66>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_Init+0x6c>
 3f8:	00 00       	nop
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
 400:	8f e3       	ldi	r24, 0x3F	; 63
 402:	9c e9       	ldi	r25, 0x9C	; 156
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
 418:	8f e9       	ldi	r24, 0x9F	; 159
 41a:	9f e0       	ldi	r25, 0x0F	; 15
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	08 95       	ret

00000426 <LCD_SendChar>:
 426:	cf 93       	push	r28
 428:	c8 2f       	mov	r28, r24
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 448:	6c 2f       	mov	r22, r28
 44a:	60 7f       	andi	r22, 0xF0	; 240
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_SetPortValue>
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 45c:	8f e9       	ldi	r24, 0x9F	; 159
 45e:	9f e0       	ldi	r25, 0x0F	; 15
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <LCD_SendChar+0x3a>
 464:	00 c0       	rjmp	.+0      	; 0x466 <LCD_SendChar+0x40>
 466:	00 00       	nop
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 472:	8f e9       	ldi	r24, 0x9F	; 159
 474:	9f e0       	ldi	r25, 0x0F	; 15
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <LCD_SendChar+0x50>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <LCD_SendChar+0x56>
 47c:	00 00       	nop
 47e:	6c 2f       	mov	r22, r28
 480:	62 95       	swap	r22
 482:	60 7f       	andi	r22, 0xF0	; 240
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_SetPortValue>
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 494:	8f e9       	ldi	r24, 0x9F	; 159
 496:	9f e0       	ldi	r25, 0x0F	; 15
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_SendChar+0x72>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_SendChar+0x78>
 49e:	00 00       	nop
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	62 e0       	ldi	r22, 0x02	; 2
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_SetPinValue>
 4aa:	8f e9       	ldi	r24, 0x9F	; 159
 4ac:	9f e0       	ldi	r25, 0x0F	; 15
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCD_SendChar+0x88>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCD_SendChar+0x8e>
 4b4:	00 00       	nop
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <LCD_SendString>:
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	fc 01       	movw	r30, r24
 4c2:	80 81       	ld	r24, Z
 4c4:	88 23       	and	r24, r24
 4c6:	89 f0       	breq	.+34     	; 0x4ea <LCD_SendString+0x30>
 4c8:	8f 01       	movw	r16, r30
 4ca:	c0 e0       	ldi	r28, 0x00	; 0
 4cc:	0e 94 13 02 	call	0x426	; 0x426 <LCD_SendChar>
 4d0:	8f e9       	ldi	r24, 0x9F	; 159
 4d2:	9f e0       	ldi	r25, 0x0F	; 15
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_SendString+0x1a>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_SendString+0x20>
 4da:	00 00       	nop
 4dc:	cf 5f       	subi	r28, 0xFF	; 255
 4de:	f8 01       	movw	r30, r16
 4e0:	ec 0f       	add	r30, r28
 4e2:	f1 1d       	adc	r31, r1
 4e4:	80 81       	ld	r24, Z
 4e6:	81 11       	cpse	r24, r1
 4e8:	f1 cf       	rjmp	.-30     	; 0x4cc <LCD_SendString+0x12>
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <LCD_SendNumber>:

/* write number into LCD */ 
void LCD_SendNumber(uint16 Number)
{
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	2a 97       	sbiw	r28, 0x0a	; 10
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61
 508:	ac 01       	movw	r20, r24
	uint8 i = 0, arr[10];
	if (Number == 0)
 50a:	89 2b       	or	r24, r25
 50c:	21 f4       	brne	.+8      	; 0x516 <LCD_SendNumber+0x24>
	{
		LCD_SendChar ('0');
 50e:	80 e3       	ldi	r24, 0x30	; 48
 510:	0e 94 13 02 	call	0x426	; 0x426 <LCD_SendChar>
 514:	3b c0       	rjmp	.+118    	; 0x58c <LCD_SendNumber+0x9a>
 516:	10 e0       	ldi	r17, 0x00	; 0
	}
	while (Number != 0)
	{
		arr[i] = Number % 10 + '0';
 518:	e1 e0       	ldi	r30, 0x01	; 1
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	ec 0f       	add	r30, r28
 51e:	fd 1f       	adc	r31, r29
 520:	e1 0f       	add	r30, r17
 522:	f1 1d       	adc	r31, r1
 524:	9a 01       	movw	r18, r20
 526:	ad ec       	ldi	r26, 0xCD	; 205
 528:	bc ec       	ldi	r27, 0xCC	; 204
 52a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__umulhisi3>
 52e:	96 95       	lsr	r25
 530:	87 95       	ror	r24
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	9c 01       	movw	r18, r24
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	82 0f       	add	r24, r18
 54e:	93 1f       	adc	r25, r19
 550:	9a 01       	movw	r18, r20
 552:	28 1b       	sub	r18, r24
 554:	39 0b       	sbc	r19, r25
 556:	c9 01       	movw	r24, r18
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	80 83       	st	Z, r24
		Number = Number / 10;
 55c:	9a 01       	movw	r18, r20
 55e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__umulhisi3>
 562:	ac 01       	movw	r20, r24
 564:	56 95       	lsr	r21
 566:	47 95       	ror	r20
 568:	56 95       	lsr	r21
 56a:	47 95       	ror	r20
 56c:	56 95       	lsr	r21
 56e:	47 95       	ror	r20
		i++; 
 570:	1f 5f       	subi	r17, 0xFF	; 255
	uint8 i = 0, arr[10];
	if (Number == 0)
	{
		LCD_SendChar ('0');
	}
	while (Number != 0)
 572:	41 15       	cp	r20, r1
 574:	51 05       	cpc	r21, r1
 576:	81 f6       	brne	.-96     	; 0x518 <LCD_SendNumber+0x26>
	{
		arr[i] = Number % 10 + '0';
		Number = Number / 10;
		i++; 
	}
	while (i > 0)
 578:	11 23       	and	r17, r17
 57a:	41 f0       	breq	.+16     	; 0x58c <LCD_SendNumber+0x9a>
	{
		LCD_SendChar(arr[i-1]);
 57c:	fe 01       	movw	r30, r28
 57e:	e1 0f       	add	r30, r17
 580:	f1 1d       	adc	r31, r1
 582:	80 81       	ld	r24, Z
 584:	0e 94 13 02 	call	0x426	; 0x426 <LCD_SendChar>
		i--;
 588:	11 50       	subi	r17, 0x01	; 1
	{
		arr[i] = Number % 10 + '0';
		Number = Number / 10;
		i++; 
	}
	while (i > 0)
 58a:	c1 f7       	brne	.-16     	; 0x57c <LCD_SendNumber+0x8a>
	{
		LCD_SendChar(arr[i-1]);
		i--;
	}
}
 58c:	2a 96       	adiw	r28, 0x0a	; 10
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	08 95       	ret

000005a0 <LCD_Clear>:

/* clear LCD display */
void LCD_Clear(void)
{
	LCD_SendCommand(DISPLAY_CLEAR);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
	LCD_SendCommand(CURSOR_HOME);
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_SendCommand>
 5ac:	08 95       	ret

000005ae <main>:
}*/

int main(void)
{
	uint16 temp, x;
	ADC_Init();
 5ae:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	LCD_Init();
 5b2:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_Init>
	x = ADC_Read(0);
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Read>
	while (1)
	{
		LCD_Clear();
 5bc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_Clear>
		x = ADC_Read(0);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Read>
 5c6:	ec 01       	movw	r28, r24
		LCD_SendString("Temp: ");
 5c8:	80 e6       	ldi	r24, 0x60	; 96
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_SendString>
		temp = x/2;
		LCD_SendNumber(temp);
 5d0:	ce 01       	movw	r24, r28
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_SendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5da:	2f e9       	ldi	r18, 0x9F	; 159
 5dc:	86 e8       	ldi	r24, 0x86	; 134
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	21 50       	subi	r18, 0x01	; 1
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x32>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x3c>
 5ea:	00 00       	nop
 5ec:	e7 cf       	rjmp	.-50     	; 0x5bc <main+0xe>

000005ee <__umulhisi3>:
 5ee:	a2 9f       	mul	r26, r18
 5f0:	b0 01       	movw	r22, r0
 5f2:	b3 9f       	mul	r27, r19
 5f4:	c0 01       	movw	r24, r0
 5f6:	a3 9f       	mul	r26, r19
 5f8:	70 0d       	add	r23, r0
 5fa:	81 1d       	adc	r24, r1
 5fc:	11 24       	eor	r1, r1
 5fe:	91 1d       	adc	r25, r1
 600:	b2 9f       	mul	r27, r18
 602:	70 0d       	add	r23, r0
 604:	81 1d       	adc	r24, r1
 606:	11 24       	eor	r1, r1
 608:	91 1d       	adc	r25, r1
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
